name: Build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      clean:
        description: 'Clean Cache'
        required: false
        default: 'false'
  push:
    branches:
      - main
    paths:
      - 'open.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  ROOTFS_URL: https://github.com/cstkingkey/build/releases/download/rootfs-2023.06.22
  CLANG_URL: https://github.com/cstkingkey/build/releases/download/clang-release%2F16.x-2023.06.19-1706/clang.tar.xz
  
jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            deb_arch: arm64
          - arch: x86_64
            deb_arch: amd64
          - arch: i686
            deb_arch: i386
          - arch: powerpc64le
            deb_arch: ppc64el
          # lld issue https://github.com/llvm/llvm-project/issues/58377  
          - arch: mips64el
            deb_arch: mips64el
            abi: abi64
          - arch: arm
            deb_arch: armhf
            abi: eabihf
          - arch: arm
            deb_arch: armel
            abi: eabi
          # lld issue https://github.com/llvm/llvm-project/issues/57097  
          - arch: s390x
            deb_arch: s390x
          - arch: mipsel
            deb_arch: mipsel
          - arch: mips
            deb_arch: mips

    steps:
    - name: Checkout
      uses: actions/checkout@main
        
    - name: Initialization environment
      id: env
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install binutils-${{ matrix.arch }}-linux-gnu${{ matrix.abi }}
        rootfs=$ROOTFS_URL/rootfs-${{ matrix.deb_arch }}.tar.xz
        wget $rootfs
        wget $CLANG_URL
        sudo tar xf rootfs*.tar.xz -C /opt/
        sudo tar xf clang.tar.xz -C /usr/local/
        rustup target add ${{ matrix.arch }}-unknown-linux-gnu${{ matrix.abi }}
        echo "::set-output name=status::success"

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Build and package
      id: build
      if: steps.env.outputs.status == 'success' && !cancelled()
      run: |
        git clone https://github.com/fltk-rs/fltk-rs --recurse-submodules
        cd fltk-rs
        arch=${{ matrix.arch }}
        abi=${{ matrix.abi }}
        ARCH=$arch ABI=$abi $GITHUB_WORKSPACE/linux-entry-clang.sh cargo build --target $arch-unknown-linux-gnu${abi} --examples --release
        tar cJf fltk-$arch$abi.tar.xz target/$arch-unknown-linux-gnu${abi}/release/examples
        echo "ROOTFS=$PWD/fltk-$arch$abi.tar.xz" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Create tag
      id: tag
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        echo "fltk" >> release.txt
        echo "::set-output name=release_tag::fltk-$(date +"%Y.%m.%d")"
        echo "::set-output name=status::success"

    - name: Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.ROOTFS }}

    
