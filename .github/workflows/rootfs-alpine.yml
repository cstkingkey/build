name: Build alpine rootfs

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      clean:
        description: 'Clean Cache'
        required: false
        default: 'false'
  push:
    branches:
      - main
    paths:
      - 'open.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  ROOTFS_URL: https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/x86_64/alpine-minirootfs-3.18.2-x86_64.tar.gz

jobs:
  build:
    runs-on: ubuntu-20.04
    
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, armhf, armv7, s390x, x86, x86_64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: Initialization environment
      id: env
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install llvm-12-tools lld-12 util-linux
        sudo -E apt-get -qq install binfmt-support qemu qemu-user-static
        echo "::set-output name=status::success"

    - name: Build and package
      id: build
      if: steps.env.outputs.status == 'success' && !cancelled()
      run: |
        arch=${{ matrix.arch }}
        curl -sSL $ROOTFS_URL -o rootfs.tar.gz
        mkdir rootfs
        sudo tar xf rootfs.tar.gz -C ./rootfs/
        sudo mkdir -p rootfs/$arch/etc/apk/
        sudo cp /etc/resolv.conf rootfs/etc/
        sudo chroot rootfs /sbin/apk add -p $arch --initdb -U --arch $arch --allow-untrusted -X http://dl-cdn.alpinelinux.org/alpine/latest-stable/main/ -U pango-dev fontconfig-dev libxinerama-dev libxfixes-dev libxcursor-dev gcc g++
        sudo mv rootfs alpine
        sudo tar cJf rootfs-alpine-$arch.tar.xz alpine
        echo "ROOTFS=$PWD/rootfs-alpine-$arch.tar.xz" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Create tag
      id: tag
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        echo "rootfs alpine" >> release.txt
        echo "::set-output name=release_tag::rootfs-alpine-$(date +"%Y.%m.%d")"
        echo "::set-output name=status::success"
        
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.ROOTFS }}